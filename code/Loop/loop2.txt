static long loop2(int max) {
	for (int i = 0; i < max; i++) {
		o2[Pf(max, cnt) ? 0 : 1].m(max);
	}
	return val1 + val2;
}

static final O2[] o2 = { O2.ot, O2.of };
static abstract class O2 {
	abstract void m(int max);
	static O2 ot = new O2T(), of = new O2F(),
		oloop = new O2Loop(), os = new O2S();
}

static class O2T extends O2 {
	@Override
	void m(int max) {
		os.m(max);
		oloop.m(max);
	}
}
static class O2F extends O2 {
	@Override
	void m(int max) {
		cnt = (int) Math.sqrt(cnt);
		oloop.m(max);
	}
}

static class O2Loop extends O2 {
	@Override
	void m(int max) {
		while (cnt < 5) {
			val1 += max;
			os.m(max);
		}
	}
}

static class O2S extends O2 {
	@Override
	void m(int max) {
		val2 *= cnt;
		cnt++;
	}
}